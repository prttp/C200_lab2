// Темы:
// Простое наследование. Виртуальные функции. Абстрактные классы.
// Битовые поля.


#include <tchar.h>

#include "myString.h"
#include "Shape.h"
#include "Bytes.h"
#define	  stop __asm nop

int _tmain(int argc, _TCHAR* argv[])
{
	//Задание 1.Массив объектов класса.
	{
	//Объявите и проинициализируйте массив ar из объектов
	// типа MyString. 
	const int N=5;
	MyString str1[N] = {MyString("one"), MyString("two"), MyString("three")};
  
	//Проверка - печать строк-членов класса
	for (int i = 0; i < N; i++) {
		std::cout << str1[i].GetString() << std::endl;
	}

	//Замените размер const int N=5; , не изменяя список инициализаторов.


			
	}
	stop


	//Задание 2.Массив указателей на объекты класса.
	{
	//Объявите и проинициализируйте массив arPtr из N
	//указателей на объекты типа MyString (сами объекты 
	//создаются динамически!).
	const int N=5;
	MyString* arPtr[N] = { new MyString("one1"), new MyString("two2"), new MyString("three3") };
	//Печать строк-членов класса
	for (int i = 0; i < N; i++) {
		if (arPtr[i] != nullptr) { std::cout << arPtr[i]->GetString() << std::endl; }
	}
   	//Замените размер const int N=5; , не изменяя список инициализаторов.
	for (int i = 0; i < N; i++) {
		if (arPtr[i] != nullptr) { delete arPtr[i]; }
	}
	}
	stop


	//Задание 3.Простое наследование.Аргументы конструктора,
	// передаваемые в базовый класс.

	//Создайте иерархию классов:
	//базовый класс Shape (который описывает любую фигуру)
	//и два производных класса Rect и Circle.
	//Подумайте: какие данные и методы нужно ввести в базовый
	//и производные классы (например, любую фигуру можно сделать
	//цветной => в базовом классе можно ввести переменную, которая
	//будет определять цвет фигуры.
	//Подсказка: для хранения цвета объявите перечисление (RED,GREEN,BLUE...);
	

	
	//В конструкторах производных классов предусмотрите передачу
	//параметра-цвета конструктору базового класса.
	//При создании и уничтожении объекта производного типа определите
	//последовательность вызовов конструкторов и деструкторов базового
	//и производного классов
	



	stop
//////////////////////////////////////////////////////////////////////

	//Задание 4.Виртуальные функции.
	//4а) Модифицируйте классы Shape,Rect и Circle:
	//добавьте в каждый класс public метод void WhereAmI().
	//Реализация каждой функции должна выводить сообщение 
	//следующего вида "Now I am in class Shape(Rect или Circle)".
	//Выполните приведенный фрагмент, объясните результат.


	{
		//Shape s(GREEN, 4);
		Rect r(YELLOW, 0, 45, 20, 0);
		Circle c(RED, 5);


		//Метод какого класса вызывается в следующих строчках???
		//s.WhereAmI();	//	shape
		r.WhereAmI();	//	rect
		c.WhereAmI();	//	circle
		stop



		//Shape* pShape = &s;
		Shape* pRect = &r;
		Shape* pCircle = &c;
		//pShape->WhereAmI();	//	shape
		pRect->WhereAmI();	//	shape
		pCircle->WhereAmI(); //	shape
		stop

	
		//Заполните ... согласно комментариям
		//Shape& rShape = s; //псевдоним s
		Shape& rRect = r; //псевдоним r
		Shape& rCircle = c; //псевдоним c
    	//rShape.WhereAmI();	//вызов посредством rShape	shape
		rRect.WhereAmI();	//вызов посредством	rRect	shape
		rCircle.WhereAmI(); //вызов посредством rCircle	shape
		stop

	

	//4б) Добавьте в базовый и производные классы виртуальный
	// метод WhereAmIVirtual(). По аналогии с 4а вызовите
	// виртуальный метод посредством объектов, указателей и
	// ссылок, определенных в предыдущем фрагменте.
	//Выполните новый фрагмент, объясните разницу. - потому что это виртуальная функция, а там указатели на базовый класс
	//s.WhereAmIVirtual();	//	shape
	r.WhereAmIVirtual();	//	rect
	c.WhereAmIVirtual();	//	circle
	//pShape->WhereAmIVirtual();	//	shape
	pRect->WhereAmIVirtual();	//	rect
	pCircle->WhereAmIVirtual();	//	circle
	//rShape.WhereAmIVirtual();	//	shape
	rRect.WhereAmIVirtual();	//	rect
	rCircle.WhereAmIVirtual();	//	circle
	stop
}
//////////////////////////////////////////////////////////////////////

	//Задание 5.Виртуальные деструкторы.
	//Модифицируйте классы:
	//a) введите соответствующие
	// деструкторы (без ключевого слова virtual).
	//Реализация каждого деструктора
	//должна выводить сообщение следующего вида
	// "Now I am in Shape's destructor!" или
	// "Now I am in Rect's destructor!"
	//Выполните фрагмент. Объясните результат. - сначала вызывается деструктор производного, потом базового

	// b) Добавьте в объявление деструкторов ключевое слово virtual 
	//Выполните фрагмент.Объясните разницу. - нет разницы

	
	//Подумайте: какие конструкторы вызываются в следующей строке?
		//Если в разработанных классов каких-то конструкторов
		//не хватает - реализуйте
		//Если Вы считаете, что в приведенном фрагменте чего-то
		//не хватает - добавьте
/*	{
		Rect r(MAGENTA, 0, 45, 20, 0);
		Shape* ar[] = { new Shape(r), new Rect(r), new Circle(r), new Circle() };
		//Вызовите для каждого элемента массива метод WhereAmIVirtual()
		for (int i = 0; i < (sizeof(ar) / sizeof(ar[0])); i++) {
			ar[i]->WhereAmIVirtual();
		}
		for (int j = 0; j < (sizeof(ar) / sizeof(ar[0])); j++) {
			delete ar[j];
			ar[j] = nullptr;
		};
		
		stop
	} */


	//Задание 6*. В чем заключается отличие 1) и 2)
	{
		Shape* pShapes = new Rect[10];//1)указатель на базовый
		Rect* pRects = new Rect[10];//2)указатель на производный

		//Попробуйте вызвать метод WhereAmIVirtual() для каждого элемента обоих массивов -
		//в чем заключается проблема??? указатель пШейпс на базовый класс, а массив из производных
		for (int i = 0; i < 10; i++) {
			pRects[i].WhereAmIVirtual();
		}
		
		for (int i = 0; i < 10; i++) {
			static_cast<Rect*>(pShapes)[i].WhereAmIVirtual();
		}

		//Освободите динамически захваченную память
		delete[] pShapes;
		pShapes = nullptr;
		delete[] pRects;
		pRects = nullptr;
	}



//////////////////////////////////////////////////////////////////////

	//Задание 7.Виртуальные функции и оператор разрешения области видимости. 

	{
		Rect r(MAGENTA, 0, 45, 20, 0);
		Shape* p = &r;	
		p->WhereAmIVirtual();// rect т.к. объект типа рект
		stop
	
		
		//4a Оператор разрешения области видимости.
		//Посредством объекта r и указателя p вызовите виртуальную функцию
		//WhereAmIVirtual()класса Shape
			p->Shape::WhereAmIVirtual();
		
	}


//////////////////////////////////////////////////////////////////////

	//Задание 8.Чисто виртуальные функции. 
	//Введите в базовый класс метод void Inflate(int); Подумайте:
	//можно ли реализовать такой метод для базового класса? => как его нужно объявить.
	//Реализуйте этот метод для производных классов.
	{
		Rect r(MAGENTA, 0, 45, 20, 0);
		Shape* p = &r;
		p->Inflate(5);
		Circle c(RED, 3);
		p = &c;
		p->Inflate(5);
	}



//////////////////////////////////////////////////////////////////////
	//Задание 9. Создайте глобальную функцию, которая будет принимать любое
	//количество указателей на строки, а возвращать объект MyString,
	//в котором строка будет конкатенацией параметров
	MyString f = Unite("onee", "two", "three", "end");
	MyString s("sdf");
	MyString s1 = std::move(s);
////////////////////////////////////////////////////////////////////////

	//Задание 10.Объединения (union) C++. Битовые поля.
	//1.
	//Создайте следующие классы для различных представлений значений байта:
	//Bin - для двоичного представления
	//Hex - для шестнадцатерчного представления
	//Oct - для восьмеричного представления.
	//Подсказка 1: - для удобства используйте битовые поля.
	//Подсказка 2: - конструкторов в таких вспомогательных классах быть не должно,
	//так как все они будут членами объединения (union).
	//2.
	//В каждом классе введите метод Show, который должен выводить значение в
	//соответствующем виде
	//3.
	//Посредством объединения MyByte предоставьте пользователю возможность манипулировать
	//одним и тем же значением по-разному:
	//а) выводить: десятичное, шестнадцатеричное, восьмеричное, двоичное значение байта 
	//          а также символ, соответствующий хранимому значению (если есть соответствие);
	//б) выводить отдельные (указанные посредством параметра) шестнадцатеричные,
	//			восьмеричные, двоичные цифры;
	//в) изменять отдельные двоичные, восьмеричные или шестнадцатеричные цифры;

	Bytes byte(0x1f);
	byte.ShowHex();
	byte.ShowBin();
	byte.ShowDec();
	byte.ShowHexPos(0);
	byte.ShowChar();


	return 0;
}//endmain

